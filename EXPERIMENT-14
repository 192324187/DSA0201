import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the uploaded video file (replace 'video.mp4' with the actual filename of your video)
video_path = 'video.mp4'  # Replace with your uploaded file's name
cap = cv2.VideoCapture(video_path)

# Get the video's width, height, and frames per second (FPS)
fps = cap.get(cv2.CAP_PROP_FPS)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Define source points (choose any points from the video frame, e.g., the four corners of the video)
src_points = np.float32([
    [100, 100],  # top-left corner
    [width - 100, 100],  # top-right corner
    [100, height - 100],  # bottom-left corner
    [width - 100, height - 100]  # bottom-right corner
])

# Define the destination points (where the source points will be mapped)
dst_points = np.float32([
    [150, 150],  # top-left corner
    [width - 50, 100],  # top-right corner
    [50, height - 50],  # bottom-left corner
    [width - 150, height - 100]  # bottom-right corner
])

# Calculate the Homography matrix
matrix, _ = cv2.findHomography(src_points, dst_points)

# Create a VideoWriter object to save the output video
output_path = 'output_homography_video.mp4'  # Output video filename
fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Codec for .mp4 files
out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

# Process the video frame by frame
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Apply the Homography transformation to each frame
    transformed_frame = cv2.warpPerspective(frame, matrix, (width, height))

    # Write the transformed frame to the output video
    out.write(transformed_frame)

# Release the video objects
cap.release()
out.release()

# Display the result message
print(f"Homography transformed video has been saved as {output_path}")
